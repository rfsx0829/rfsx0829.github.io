<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSRF学习</title>
      <link href="/2019/6091.html"/>
      <url>/2019/6091.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF学习"><a href="#CSRF学习" class="headerlink" title="CSRF学习"></a>CSRF学习</h1><p>感觉CSRF还是要用到XSS相关的东西</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>前面的准备工作，应该说看过前面关于XSS的都应该很清楚了，无非就是克隆仓库然后把项目运行起来，没有什么值得写的，可以去参照前面那篇文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">Listening at http://localhost:4000</span><br></pre></td></tr></table></figure><h2 id="局域网测试"><a href="#局域网测试" class="headerlink" title="局域网测试"></a>局域网测试</h2><p>先组成局域网啦，这个不用废话了，当前笔者在局域网中的 IP 是 172.16.151.170</p><a id="more"></a><h3 id="设置名字-Cookie"><a href="#设置名字-Cookie" class="headerlink" title="设置名字(Cookie)"></a>设置名字(Cookie)</h3><p>电脑和手机 分别设置不同的 名字（其实是 Cookie 啦，用来演示 CSRF 的作用）</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1560058495442-b0eb6581-76ba-4a1b-9cdb-74a6ba8eab0e.png" alt="PCName"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1560058524715-91a47acf-f49f-4163-a534-f9c5b2aa2cc2.png" alt="PCName"></p><p>移动端</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1560058800665-5ba7dd77-f3b5-4d40-8a80-1a74b1727994.png" alt="PhoneName"><br><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1560058810161-04173216-542b-496b-90b2-20b8128acaf5.png" alt="PhoneName"></p><p>两边都设置好了名字，电脑端是 PCName 手机端是 PhoneName</p><h3 id="查看-Store"><a href="#查看-Store" class="headerlink" title="查看 Store"></a>查看 Store</h3><p>查看一下服务端储存的数据，有两个</p><ul><li>一个是公开的 pub ，谁都可以编辑，并且没有不会留下修改人的信息</li><li>另一个是 pro ，必须设置过名字的客户端才能编辑，且会记录是谁编辑了此字段</li></ul><p>未编辑过的情况，什么都还没有</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1560058971970-eaf698d5-6662-43b4-8f8a-2c487d30502e.png" alt="store"></p><p>尝试用电脑端编辑一下 pub 和 pro</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1560059040560-ee7b04f1-d11e-4e74-95b3-398d40d503e0.png" alt="onPC"></p><p>编辑好了之后用手机端看一下，应该查看到也是 PCName 修改了 pro 字段</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1560059143496-4e885b6f-0698-420d-a1f0-4f9cb4d7afe6.png" alt="onMobile"></p><h3 id="进行CSRF攻击"><a href="#进行CSRF攻击" class="headerlink" title="进行CSRF攻击"></a>进行CSRF攻击</h3><p>其实就是将一个做事情的链接，放在大家都能看到地方，在这个情形下，当然是 pub 最适合啦，然后诱导其他用户点击</p><p>这里在电脑端修改 pub 为一个做坏事的链接，并诱导手机端点击，将pub改为 <code>&lt;a href=&quot;http://172.16.151.170:4000/store?pro=SomeSecretInfo&quot;&gt;Click Here !&lt;/a&gt;</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1560059537983-09f80737-2a6d-46ea-b42e-76b8d6971c22.png" alt="csrf"></p><p>修改好了，这个链接点击之后就会用当前用户去修改 pro 的值，用手机端测试一下</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1560059660422-0b996edb-bc95-4238-9606-83350deb8601.png" alt="csrf"></p><p>确实有钓鱼链接了，那么点击一下试试</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1560059682851-53bdbbb1-98e9-41b1-8456-d3c6273ce169.png" alt="csrf"></p><p>可以看到，手机端的私人信息被盗取。CSRF攻击成功</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>伪造一个链接，诱骗你访问，于是盗取了你的相关信息，就这么回事</p>]]></content>
      
      
      <categories>
          
          <category> information-security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS学习</title>
      <link href="/2019/6071.html"/>
      <url>/2019/6071.html</url>
      
        <content type="html"><![CDATA[<h1 id="XSS学习"><a href="#XSS学习" class="headerlink" title="XSS学习"></a>XSS学习</h1><p>其实很多东西在 GIthub 的 README 已经写得非常清楚了，只不过是英文的</p><p><del>这里就相当于来做一个翻译？</del></p><p>这里用图片来解释吧，可能会易懂一些</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>那接下来就详细解释一下吧</p><h2 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h2><p>这是废话了，不然怎么用我的例子呢是吧</p><blockquote><p>git clone <a href="https://github.com/rfsx0829/information-security.git" target="_blank" rel="noopener">https://github.com/rfsx0829/information-security.git</a></p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1559911210513-34025a95-00ba-4a2b-8a82-25724dad15e7.png" alt="git clone"></p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><blockquote><p>$ cd information-security/XSS<br>$ go run main.go<br>Listening at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p></blockquote><a id="more"></a><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1559911289861-2f70965d-755b-4da5-98a6-01afe1e7ffbf.png" alt="run project"></p><h2 id="模拟实际情况（局域网测试）"><a href="#模拟实际情况（局域网测试）" class="headerlink" title="模拟实际情况（局域网测试）"></a>模拟实际情况（局域网测试）</h2><h3 id="组成局域网"><a href="#组成局域网" class="headerlink" title="组成局域网"></a>组成局域网</h3><ul><li>连接同一个 WI-FI</li><li>电脑开热点</li><li>手机开热点</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><p>电脑打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1559911385882-36940064-23cd-4812-b692-12efe2e5e311.png" alt="hello"></p><p>手机打开 <a href="http://192.168.2.1:4000" target="_blank" rel="noopener">http://192.168.2.1:4000</a></p><p>ps: 地址改为电脑在局域网中的地址，笔者为 192.168.2.1</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1559911587928-acad02b3-a435-4c4c-bbc7-d5e7274c7200.png" alt="hello"></p><p>可以看到，一切正常</p><h4 id="简单修改一下"><a href="#简单修改一下" class="headerlink" title="简单修改一下"></a>简单修改一下</h4><p>电脑访问 <a href="http://localhost:4000/?set=changed" target="_blank" rel="noopener">http://localhost:4000/?set=changed</a> 修改一下服务端储存的值</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1559911651976-e729bfec-d55c-4503-b131-4d68eca7b351.png" alt="changed"></p><p>手机刷新一下</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1559911722217-ad5d2a85-0213-4c33-9fb4-f82fd50d820e.png" alt="changed"></p><p>修改成功</p><h4 id="攻击-恶意标签"><a href="#攻击-恶意标签" class="headerlink" title="攻击(恶意标签)"></a>攻击(恶意标签)</h4><p>服务端为了测试方便，添加了一个 js 文件用于施放攻击<br>在服务端代码中可以看到，返回的js文件如下</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1559911846474-bd4f8ce7-08fd-4f96-9c3d-13e2e7529bc1.png" alt="hello.js"></p><p>具体做的事情就是弹出一个窗口，显示 <code>Hello Javascript !</code></p><p>电脑访问 <a href="http://localhost:4000/?set=" target="_blank" rel="noopener">http://localhost:4000/?set=</a><script src="http://192.168.2.1:4000/hello.js"></script></p><p>即将服务端储存的文本修改为一个恶意的HTML标签<code>&lt;script src=&quot;http://192.168.2.1:4000/hello.js&quot;&gt;&lt;/script&gt;</code>，加载并执行一段JS代码</p><p>访问过后再回到主页<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1559912079627-4331e986-0ae8-492a-9cff-0a43c6518144.png" alt="after"></p><p>注入的js代码执行成功</p><p>手机端刷新查看效果</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1559912149771-f1ca4e40-3853-4337-8f30-f9fad595289f.png" alt="after"></p><p>可以看到，手机端也确实有被作用到</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>为什么要在局域网中测试呢，只是想凸显一下这个 确实是一个攻击，而不仅仅是一个只在本地作用的修改网页的小把戏</p><p>想想，你的一切操作都是在电脑端做的哦，手机上啥事都没做，但是三次访问同一页面，看到的东西却都不一样，如果不是在局域网，在公网，那就是完全的攻击哦，假设注入的再是恶意代码。。。</p>]]></content>
      
      
      <categories>
          
          <category> information-security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter Dio 网络问题一记</title>
      <link href="/2019/5290.html"/>
      <url>/2019/5290.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter-Dio-网络问题一记"><a href="#Flutter-Dio-网络问题一记" class="headerlink" title="Flutter Dio 网络问题一记"></a>Flutter Dio 网络问题一记</h1><h2 id="问题起因和描述"><a href="#问题起因和描述" class="headerlink" title="问题起因和描述"></a>问题起因和描述</h2><p>笔者无聊用 Flutter 写了个 APP 玩玩，在需要进行网络访问的时候，选择使用 <a href="https://github.com/flutterchina/dio" target="_blank" rel="noopener">Dio</a> 这个库</p><p>在 Debug 模式下表现一切正常，但是当我编译为发布版时，网络访问不能正常工作，错误为 Dio Error: OS Error: Permission Denied.</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1559131545845-7b932922-efca-4015-b767-deceac464433.png" alt="Screenshot"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>读报错很容易知道，是权限问题，系统不允许进行网络访问</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>既然是系统不给权限，那就让系统给权限就好了</p><p>在 {project}/android/app/src/main/AndroidMainfest.xml 文件，在application标签前面加一行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>允许使用网络权限</p><p>添加之后，重新编译，问题解决！</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dio </tag>
            
            <tag> 小问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些没有发布的项目</title>
      <link href="/2019/514.html"/>
      <url>/2019/514.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://styts.com/cycle-of-side-projects/" target="_blank" rel="noopener">原文链接(英文)</a></p><blockquote><p>作为一个程序员，我有100多个没有发布的个人项目。</p><p>它们通常是这样开始的：我对一个想法感到兴奋，估计可以在较短的时间内完成，比如一个周末或几周。结果也差不太多，我疯狂地工作一段时间，项目或多或少都写好了。</p><p>但是它能够发布了吗？它是否算完成了呢？有趣和令人兴奋的部分确实是基本完成了，能够证明某个概念是有效的。但是，又好像缺少了一些东西，不是特别能引起别人的兴趣，有一些乏味。项目缺乏设计或视觉呈现，这算不上很重要，功能才比较重要，项目确实能工作。</p><p>它也没有登陆页面和介绍页面，这些将对新用户非常友好。但我不是一个好的作家，写不出太多文字。我甚至讨厌写作，我害怕被别人评判，所以我选择不写。</p><p>最后一个缺失的部分是营销。世界上几乎没有任何事情，比一个内向的人想到一个创意更糟糕，因为他不得不向全世界推销自己的想法。如果世界批评你的项目怎么办？如果你了解到，别人已经做过了怎么办？世界也可能完全沉默不加理睬，就像以前的许多人一样，你的项目将沉没在互联网的深处。</p><p>这些缺失的部分不算多，可能还需要投入整个项目时间的20％。但是这最后的20％，对你来说，比80％用在编码的时间更难做到。因此，你可能会让项目就停在那里。何况世界上又出现了新的闪亮的东西，你又可以急切地在新东西上工作了。</p><p>再过一会，你就会去拥抱新项目，忘了旧项目。让那些没做完的事情继续保持没做完，让这样的周期变成永久化。</p></blockquote><p>说实话，看到这个，感同身受</p>]]></content>
      
      
      <categories>
          
          <category> 收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当今世界计算机硬件与软件发展现状</title>
      <link href="/2019/513.html"/>
      <url>/2019/513.html</url>
      
        <content type="html"><![CDATA[<h1 id="当今世界计算机硬件与软件发展现状"><a href="#当今世界计算机硬件与软件发展现状" class="headerlink" title="当今世界计算机硬件与软件发展现状"></a>当今世界计算机硬件与软件发展现状</h1><h2 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h2><p>何为计算机？</p><p>计算机是一种根据一系列指令对数据进行处理的电子设备。</p><p>而不局限于我们经常接触到的个人电脑，个人电脑只是计算机的一种。</p><a id="more"></a><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><h3 id="回首历史"><a href="#回首历史" class="headerlink" title="回首历史"></a>回首历史</h3><h4 id="卡片机时代"><a href="#卡片机时代" class="headerlink" title="卡片机时代"></a>卡片机时代</h4><p>最初的阶段是卡片时期，即使用<strong>穿孔卡片</strong>作为指令的载体。</p><p>1801年雅卡尔发明的提花织布机，可以通过相互串联的穿孔卡片达到半自动生产，且更换卡片无需更改机械设计，是可编程化机器的里程碑。</p><h4 id="数字管时期"><a href="#数字管时期" class="headerlink" title="数字管时期"></a>数字管时期</h4><p>1930年时，四则运算已经成为了桌上型机械计算器的基本功能，但是动力全靠机械，效率极低。</p><p>第一部全电子化的桌上计算器是英国人研发的，以<strong>数字管</strong>和177个<strong>微型闸流管</strong>来显示数字。</p><h4 id="电子电路和图灵机"><a href="#电子电路和图灵机" class="headerlink" title="电子电路和图灵机"></a>电子电路和图灵机</h4><p>1930年代后期到1940年代，受到二次大战影响，此一时期被认为是计算机发展史中的混乱时期，战争开启了现代电脑的时代，电子电路，继电器，电容及真空管相继登场，取代机械器件，数字计算器开始得到广泛发展，使用包含继电器或真空管的电路，以打孔纸带作为输入和主要（非短期）储存媒介。</p><p>1936年，图灵发表的研究报告对计算机和计算机科学领域造成巨大冲击，这篇报告主要是为了证明循环处理程式的死角，亦即停机问题的存在。图灵也以算法概念为通用计算机（纯理论器件）作出定义，即图灵机。</p><p>1937年，美国数学家兼工程师 克劳德·香农 在麻省理工学院发表他的硕士论文，是史上首度将布尔代数应用在电子继电器和电闸上的人。论文题为《中继和交换电路的符号分析》（A Symbolic Analysis of Relay and Switching Circuits），是数字电路设计的实践基础。</p><p>同年，在贝尔实验室工作的乔治组装出了一部以继电器表示二进位制的电脑模型机。</p><h4 id="冯·诺伊曼结构"><a href="#冯·诺伊曼结构" class="headerlink" title="冯·诺伊曼结构"></a>冯·诺伊曼结构</h4><p>冯·诺伊曼写过一篇广为流传的文章《EDVAC独家报告》（First Draft of a Report on the EDVAC），内容描述EDVAC将程式和计算中的资料，设计储存在同一内存内。冯·诺伊曼的这项设计后来被称为<strong>冯·诺伊曼架构</strong>，成为发展第一部真正具有运作弹性、一般用途数字电脑的设计基础。</p><p>第一部成功运作的<strong>冯·诺伊曼结构</strong>电脑是1948年曼彻斯特大学的小规模实验机，又称“宝贝”。随后在1949年，曼彻斯特马克一号电脑登场，功能完整，以威廉管和<strong>磁鼓</strong>作为内存媒介，并且引进<strong>变址寄存器</strong>的功能。</p><p>1954年，IBM推出一款电脑体积较小，价格和善，后来广受欢迎。这款IBM 650重达900公斤，附属的电力供应器件也有1350公斤左右，两者各安置在与人等高的橱柜里。原本其<strong>磁鼓内存</strong>只能保存2000个十位数字组，还需要晦涩难明的编程程序才能有效运作，诸如此类的内存限制在之后的十年间主宰了编程程序，直到编程模组一番革命性的改变后，软件开发才有了较人性化的转变。</p><h3 id="CPU发展历程"><a href="#CPU发展历程" class="headerlink" title="CPU发展历程"></a>CPU发展历程</h3><p>从四位处理器，到六十四位酷睿微架构，这其中又经历了什么呢</p><h4 id="摩尔定律"><a href="#摩尔定律" class="headerlink" title="摩尔定律"></a>摩尔定律</h4><p><strong>摩尔定律</strong>是由英特尔（Intel）创始人之一戈登·摩尔提出的。其内容为：<strong>集成电路</strong>上可容纳的<strong>晶体管</strong>数目，约每隔两年便会增加一倍；经常被引用的“18个月”，是由英特尔首席执行官大卫·豪斯提出：预计18个月会将芯片的性能提高一倍。</p><p>摩尔定律是简单评估半导体技术进展的经验法则，其重要的意义在于大抵而言，若在相同面积的晶圆下生产同样规格的IC，随着制程技术的进步，每隔一年半，IC产出量就可增加一倍，换算为成本，即每隔一年半成本可降低五成，平均每年成本可降低三成多。就摩尔定律延伸，IC技术每隔一年半推进一个世代。</p><p>但是摩尔定律已经快要失效了。</p><p>为了让摩尔定律延续到更小的器件尺度，学术界和工业界在不同的材料、器件结构和工作原理方面的探索一直在进行中。探索的问题之一是晶体管的闸极设计。随着器件尺寸越来越小，能否有效的控制晶体管中的电流变得越来越重要。相比于三面都有闸极的<strong>多闸极晶体管</strong>，<strong>纳米线</strong>晶体管将闸极四面围住，从而进一步改善了闸极对电流的控制。</p><p>随着新工艺节点的不断推出，晶体管中原子的数量已经越来越少，种种物理极限制约着其进一步发展。比如当闸极长度足够短的时候，<strong>量子隧穿效应</strong>就会发生，会导致漏电流增加。关于摩尔定律的终点究竟还有多远，看法并不一致。有预测认为摩尔定律的极限将在2025年左右到来，但也有更乐观的预测认为还能持续更久。</p><h3 id="发展现状·集成芯片时期"><a href="#发展现状·集成芯片时期" class="headerlink" title="发展现状·集成芯片时期"></a>发展现状·集成芯片时期</h3><p>第三波电脑世代来临，电脑使用度爆炸性的成长，这些全仰赖杰克·基尔比和罗伯特·诺伊斯的独立发明集成电路，引领英特尔发明微处理器。在1960年代，大量的电脑技术和过去的第二波电脑世代重叠，直到1975年后期，第二波电脑世代的机器仍在持续量产。</p><p>微处理器的诞生连带刺激微电脑的发展，轻便小巧，物廉价美的电脑成为个人及小公司唾手可得的工具，微电脑在1970年代初登场，到了1980年代后就已经成为家家户户都可看到的产品了。电脑逐渐成为微电脑架构的天下，再加上来自大型电脑的特色后，现如今已主宰大部分的电脑市场。</p><h3 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h3><h4 id="量子计算机"><a href="#量子计算机" class="headerlink" title="量子计算机"></a>量子计算机</h4><p>量子计算机，字面意思，就是使用量子逻辑计算的设备。用来储存数据的对象是量子比特，使用量子算法进行数据操作。</p><p>紧接着1985年大卫·杜斯提出了量子图灵机模型。人们研究量子计算机最初很重要的一个出发点是探索通用计算机的计算极限。当使用计算机模拟量子现象时，因为庞大的希尔伯特空间而数据量也变得庞大。一个完好的模拟所需的运算时间则变得相当长，甚至是不切实际的天文数字。理查德·费曼当时就想到如果用量子系统所构成的计算机来模拟量子现象则运算时间可大幅度减少，从而量子计算机的概念诞生。半导体靠控制集成电路来记录及运算信息，量子计算机则希望控制原子或小分子的状态，记录和运算信息。</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="回首历史-1"><a href="#回首历史-1" class="headerlink" title="回首历史"></a>回首历史</h3><p>在计算机刚被发明创造的时候，还是非常笨重和昂贵的，所以能用上的都不是一般人，运行的软件也基本都是大公司的专有软件，如金融，军事，科研等方面，帮忙统计和计算各种数据之类的。</p><p>继续跟随发展，计算机最开始不是靠软件盈利，几乎全靠硬件，随着硬件生产规模越来越大，硬件降价，之后，软件业从计算机工业中独立出来，成为一枝新秀。那时，硬件厂商开放了他们的系统软件（由于没有这种开放，不能进一步推销他们的产品），有几个公司开始提供定制软件的服务，然而那时没有专门经销软件的公司。由于软件免费，用户相互赠送，使软件不断重用与推广，并鼓励共享软件的发展。例如，IBM科学用户组织SHARE提供了软件重用的目录清单，包含了三角函数分类和合并计算的多个数学程序，并对进入了SHARE目录中的软件产品，能给予此领域的最高荣誉。</p><p>再以后，甚至因为不够稳定而曾经出现过软件危机。软件方面投入的资金和人力无法控制，软件开发完成的时间无法确定，软件的可靠性等等。</p><p>稳定阶段中开始出现了计算机学科的学术讨论。第一个计算机科学程序在六十年代晚期奠基，不久以后又编制了第一个管理信息系统程序。当时计算机软件工程还没有从计算机学科中分离出来，直到微型计算机年代才独立成为一门学科。尽管当时没有形成学科，然而软件工程研究一直在进行，重点聚集在计算机语言的问题上。</p><p>在此阶段，一些计算机科学家大力宣传他们引入的新思想。人工智能就是第一个竭力宣扬的学科，即称之为“有知觉”的机器，可以模仿人类大脑的功能，并期望代替人类大脑去做任何事情。</p><h4 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h4><p>最初的计算机 都只能单机工作，还不能互相联系，直到互联网的问世。</p><p>在1950年代，通信研究者认识到需要允许在不同计算机用户和通信网络之间进行常规的通信。这促使了分散网络、排队论和分组交换的研究。1960年，美国国防部高等研究计划署（ARPA）出于冷战考虑创建的ARPA网引发了技术进步并使其成为互联网发展的中心。1973年，ARPA网扩展成互联网。</p><p>经过多年，互联网成功地容纳了原有的计算机网络中的大多数（尽管像FidoNet的一些网络仍然保持独立）。这一快速发展要归功于互联网没有中央控制，以及互联网协议非私有的特质，前者造成了互联网有机的生长，而后者则鼓励了厂家之间的兼容，并防止了某一个公司在互联网上称霸。</p><h3 id="发展现状"><a href="#发展现状" class="headerlink" title="发展现状"></a>发展现状</h3><h4 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h4><p>早期的人工智能研究人员直接模仿人类进行逐步的推理，就像是玩棋盘游戏或进行逻辑推理时人类的思考模式。到了1980和1990年代，利用<strong>概率</strong>和经济学上的概念，人工智能研究还发展了非常成功的方法处理<strong>不确定</strong>或不完整的资讯。</p><p>对于困难的问题，有可能需要大量的运算资源，也就是发生了“可能组合爆增”：当问题超过一定的规模时，计算机会需要天文数量级的存储器或是运算时间。寻找更有效的算法是优先的人工智能研究项目。</p><p>人类解决问题的模式通常是用最快捷、直观的判断，而不是有意识的、一步一步的推导，早期人工智能研究通常使用逐步推导的方式。人工智能研究已经于这种“次表征性的”解决问题方法获取进展：实体化Agent研究强调<strong>感知运动</strong>的重要性。神经网络研究试图以模拟人类和动物的大脑结构重现这种技能。</p><p>当前的人工智能只能算是初步发展，虽然已经影响到了我们生活的方方面面，但还是有很多可以做得更加好的地方，我近期还听到奋战在前线的优秀程序员说，众所周知人工智能靠人工，说明发展得还不够，还需快马加鞭。</p><h4 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h4><p>云计算是一种基于<strong>互联网</strong>的计算方式，通过这种方式，共享的软硬件资源和信息可以按需求提供给计算机各种终端和其他设备。</p><p>云计算是继1980年代大型计算机到客户端-服务器的大转变之后的又一种巨变。用户不再需要了解“云”中基础设施的细节，不必具有相应的专业知识，也无需直接进行控制。云计算描述了一种基于互联网的新的IT服务增加、使用和交付模式，通常涉及通过互联网来提供动态<strong>易扩展</strong>而且经常是<strong>虚拟化</strong>的资源。</p><p>云计算已经融入我们的生活了，很多东西都离不开云，即使有些人还不太了解。</p><p>云教育，云物联，等等，都与我们的息息相关，说个再贴近一点的，经常听到的阿里云腾讯云之类对外提供云服务的，前段时间还有同学找我帮助他申请域名和服务器的操作。</p><p>但当前的云计算的发展程度也还不够高，虽然同人工智能一样已经对人们的生活有了很大的提升，但他们的潜力远不止于此。</p><h3 id="从编程方面来讲"><a href="#从编程方面来讲" class="headerlink" title="从编程方面来讲"></a>从编程方面来讲</h3><h4 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h4><p>或者也叫面向函数，在我最开始学习的时候，并不了解面向对象的代码架构设计和代码编程实现。所以要从字面上来区分函数和函数之间的关系，主要就靠函数命名、放在同一个代码文件里、放在同一个代码目录文件夹里来区分他们之间的关联性。</p><p>在函数时代，也没啥异常保护、异常处理、异常日志的函数编写基本原则，所以我们除了命名以外，主要注重的就是函数的输入数据参数以及格式、输出数据的参数以及格式。</p><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p>因为有了类这个东西，所以函数就可以物以类聚了。有的函数属于私有函数只能这个类里面才能调用，有的函数属于公有函数可以供外部调用。</p><p>我们平时使用类还很初级，往往是一个源代码文件中就定义一个类。而且类也没有使用继承，也就是说我所有的类都是平行的，类和类之间通过Public型的公开函数调用才产生了关系。</p><h4 id="面向接口"><a href="#面向接口" class="headerlink" title="面向接口"></a>面向接口</h4><p>何为面向接口？可能有很多人学了多年编程都没搞懂。</p><p>在系统分析和架构中，分清层次和依赖关系，每个层次不是直接向其上层提供服务（即不是直接实例化在上层中），而是通过定义一组接口，仅向上层暴露其接口功能，上层对于下层仅仅是接口依赖，而不依赖具体类。</p><p>这样做的好处是显而易见的，首先对系统灵活性大有好处。当下层需要改变时，只要接口及接口功能不变，则上层不用做任何修改。甚至可以在不改动上层代码时将下层整个替换掉，就像我们将一个金士顿16G硬盘换成一个闪迪的128G的硬盘，计算机其他地方不用做任何改动，而是把原硬盘拔下来、新硬盘插上就行了，因为计算机其他部分不依赖具体硬盘，而只依赖一个IDE接口，只要硬盘实现了这个接口，就可以替换上去。从这里看，程序中的接口和现实中的接口极为相似，所以我一直认为，接口（interface）这个词用的真是神似！</p><h4 id="面向组件"><a href="#面向组件" class="headerlink" title="面向组件"></a>面向组件</h4><p>写C/S/S三层架构，业务逻辑层独立出来，而且是物理独立部署，这样客户端代码和业务逻辑层代码就必须要彻底分开，不能不清不楚地混杂在一起了。大量使用精心的接口设计、对象设计。</p><p>因为有了独立的业务逻辑层，那么这些代码（接口/类）何时创建对象实例，何时释放，这些对象实例要运行在哪个进程容器中，就有了要求了。因而就产生了组件容器和组件。组件容器来管理组件的全生命周期（安全、创建、并发访问控制、休眠、激活唤醒、计数、摧毁释放内存），组件管理器就来管理组件的注册、发现等。</p><p>正如《COM本质论》的作者Don Box说.NET就是更好的COM，对啊，微软的意思是，以后所有的应用都应该运行在组件容器中，不管是单机应用，还是C/S应用，还是C/S/S应用，每个应用都要运行在组件容器中，由组件容器来屏蔽和管理内存的创建与回收，不要把内存的创建与释放直接袒露给开发者，否则开发者技术能力水平不一，有的烂的程序员管理不好内存，很容易就会使应用占满内存并导致操作系统崩溃。</p><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><p><strong>微服务</strong>是一种软件架构风格，它是以专注于单一责任与功能的小型功能区块为基础，利用模块化的方式组合出复杂的大型应用程序，各功能区块使用与语言无关的 API 集相互通信。</p><p>随着发展，以前那一套很棒，很理想：一整套J2EE体系，WebService + EJB完美组件模型  +组件容器/管理器中间件，包括技术架构师。是多么多么大的市场啊。</p><p>但程序员是实用主义者，怎么简单怎么来。随着第二波互联网创业热崛起，大干快上才是王道，没钱用开源开干才是王道。且正值Google崛起如日中天，Google统一开放了自己的Open API，非常轻量。这已经是微服务流行的启动了。但这时候还不能称作微服务，可以称作简化服务。再加之大众需求趋势及亚马逊的推波助澜，终于到了微服务的大盛时期。</p><h3 id="展望未来-1"><a href="#展望未来-1" class="headerlink" title="展望未来"></a>展望未来</h3><h4 id="高度人工智能"><a href="#高度人工智能" class="headerlink" title="高度人工智能"></a>高度人工智能</h4><p>前面讲了当前的人工智能发展，未来也是离不开人工智能的，在许多科幻电影中，人工智能几乎必不可少。人们也都憧憬着人工智能的发展。</p><p>经过60多年的发展，人工智能在算法、算力（计算能力）和算料（数据）等“三算”方面取得了重要突破，正处于从“不能用”到“可以用”的技术拐点，但是距离“很好用”还有诸多瓶颈。那么在可以预见的未来，人工智能发展将会出现怎样的趋势与特征呢？</p><p><strong>从专用智能向通用智能发展。</strong>如何实现从专用人工智能向通用人工智能的跨越式发展，既是下一代人工智能发展的必然趋势，也是研究与应用领域的重大挑战。2016年10月，美国国家科学技术委员会发布《国家人工智能研究与发展战略计划》，提出在美国的人工智能中长期发展策略中要着重研究通用人工智能。阿尔法狗系统开发团队创始人戴密斯·哈萨比斯提出朝着“创造解决世界上一切问题的通用人工智能”这一目标前进。微软在2017年成立了通用人工智能实验室，众多感知、学习、推理、自然语言理解等方面的科学家参与其中。</p><p><strong>从人工智能向人机混合智能发展。</strong>借鉴脑科学和认知科学的研究成果是人工智能的一个重要研究方向。人机混合智能旨在将人的作用或认知模型引入到人工智能系统中，提升人工智能系统的性能，使人工智能成为人类智能的自然延伸和拓展，通过人机协同更加高效地解决复杂问题。在我国新一代人工智能规划和美国脑计划中，人机混合智能都是重要的研发方向。</p><p><strong>从“人工+智能”向自主智能系统发展。</strong>当前人工智能领域的大量研究集中在深度学习，但是深度学习的局限是需要大量人工干预，比如人工设计深度神经网络模型、人工设定应用场景、人工采集和标注大量训练数据、用户需要人工适配智能系统等，非常费时费力。因此，科研人员开始关注减少人工干预的自主智能方法，提高机器智能对环境的自主学习能力。例如阿尔法狗系统的后续版本阿尔法元从零开始，通过自我对弈强化学习实现围棋、国际象棋、日本将棋的“通用棋类人工智能”。在人工智能系统的自动化设计方面，2017年谷歌提出的自动化学习系统（AutoML）试图通过自动创建机器学习系统降低人员成本。</p><p><strong>人工智能将加速与其他学科领域交叉渗透。</strong>人工智能本身是一门综合性的前沿学科和高度交叉的复合型学科，研究范畴广泛而又异常复杂，其发展需要与计算机科学、数学、认知科学、神经科学和社会科学等学科深度融合。随着超分辨率光学成像、光遗传学调控、透明脑、体细胞克隆等技术的突破，脑与认知科学的发展开启了新时代，能够大规模、更精细解析智力的神经环路基础和机制，人工智能将进入生物启发的智能阶段，依赖于生物学、脑科学、生命科学和心理学等学科的发现，将机理变为可计算的模型，同时人工智能也会促进脑科学、认知科学、生命科学甚至化学、物理、天文学等传统科学的发展。</p><p><strong>人工智能产业将蓬勃发展。</strong>随着人工智能技术的进一步成熟以及政府和产业界投入的日益增长，人工智能应用的云端化将不断加速，全球人工智能产业规模在未来10年将进入高速增长期。例如，2016年9月，咨询公司埃森哲发布报告指出，人工智能技术的应用将为经济发展注入新动力，可在现有基础上将劳动生产率提高40%；到2035年，美、日、英、德、法等12个发达国家的年均经济增长率可以翻一番。2018年麦肯锡公司的研究报告预测，到2030年，约70%的公司将采用至少一种形式的人工智能，人工智能新增经济规模将达到13万亿美元。</p><h4 id="云计算时代"><a href="#云计算时代" class="headerlink" title="云计算时代"></a>云计算时代</h4><p>云计算还仅仅只是一个开始，相信再多些时日，必然是一个新的时代。或者说，其实现在已经是云时代的初期了。</p><p>所有的计算都在云上完成，只要有网络，就可以做成任何事情，云可以为任何终端提供几乎无穷的算力，和几乎无限的储存。再加上以后网络的高度普及，和高速通信的发展，云时代给人们生活带来的便利难以想象。</p><h4 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h4><p>去中心化方面，现在比较成熟的技术非区块链莫属了，这是我最看好的技术之一，近两年很多人说区块链凉了，那群人是真的不懂技术，比特币是区块链的一个产物而已，比特币凉了跟区块链有什么关系，区块链技术永远不凉，去中心化是大势所趋，即使现在没有被人们所注意，在多年后，许多许多年后，必然是去中心化的天下。</p><p>集权永远不可取，民主第一！我相信任何热爱自由民主科学的人，都会热爱去中心化的技术！而这，才是未来！</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
            <tag> Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gopher China 2019 总结</title>
      <link href="/2019/4301.html"/>
      <url>/2019/4301.html</url>
      
        <content type="html"><![CDATA[<h1 id="Gopher-China-2019-总结"><a href="#Gopher-China-2019-总结" class="headerlink" title="Gopher China 2019 总结"></a>Gopher China 2019 总结</h1><h2 id="会前"><a href="#会前" class="headerlink" title="会前"></a>会前</h2><p>早早就报了名，真正开始，也依然避免不了心有悸动</p><p>从学校出发去北京，在北京租了一间屋子，五个人住，屋子还挺前卫</p><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>虽然我们都早起，但是因为北京的早高峰，我们挤地铁还是花费了很多时间，到达目的地时大会已经快开始，只得草草签到并去一些展台看了看，简单领了些小礼物</p><a id="more"></a><h3 id="大型微服务框架设计"><a href="#大型微服务框架设计" class="headerlink" title="大型微服务框架设计"></a>大型微服务框架设计</h3><p>第一场就这么强力，直接大谈设计，不得不说，我听懂的部分不算多</p><p>涉及了很多 大型框架 所需要注意的问题和解决思路，为需要自己开发大型框架的团队或公司提供了非常宝贵的建议，但因为我个人并不需要开发大型的微服务框架，所以也不是很感冒，但依然学到了很多。</p><h3 id="Grab-路径规划引擎-和-ETA"><a href="#Grab-路径规划引擎-和-ETA" class="headerlink" title="Grab 路径规划引擎 和 ETA"></a>Grab 路径规划引擎 和 ETA</h3><p>Grab 是一个主要服务于东南亚的打车公司，不得不说，这一个我很有印象，因为他们确实很强，但其实主要的内容都是算法，从所讲的 毛细地图补全，定位修复 到 路径规划 到 ETA(Estimated Time of Arrival)，无一不是跟算法息息相关，以及智能动态寻路和路径偏好选择，全是算法。跟 Go 的关系呢，就在于用 Go 实现这些功能的话，效率比较高，而且可以微服务化，高度并发</p><h3 id="TiDB"><a href="#TiDB" class="headerlink" title="TiDB"></a>TiDB</h3><p>TiDB 在之前我仅仅只是听过这个数据库，一直没有详细地去了解和体验。听过讲解之后觉得其实还挺不错。</p><p>他们所讲的内容挺丰富的，不仅有数据处理相关的内容，比如怎么提高 Query 效率，怎么高效储存等。还有一个新的小工具，FailPoint，应该是 gofail 的改良，看起来挺厉害的，值得一试</p><h3 id="Testing-how-what-why"><a href="#Testing-how-what-why" class="headerlink" title="Testing; how, what, why"></a>Testing; how, what, why</h3><p>这一场真的是非常厉害，是一位 Go 源码开发者所分享，我没资格评价，但强推，自行看 PPT</p><h3 id="Context-amp-Error"><a href="#Context-amp-Error" class="headerlink" title="Context &amp; Error"></a>Context &amp; Error</h3><p>这场很好理解，其实就讲了在业务开发中 Context 和 Error 应该怎么处理比较合理，挺不错的</p><h3 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h3><p>这场也是大佬讲的，主要是讲解同步的方法和原理，各种锁，非常详细！个人强烈推荐深入研究</p><p><a href="https://colobu.com/" target="_blank" rel="noopener">大佬的博客</a> 也是藏宝地，值得探索</p><h3 id="百度-APP"><a href="#百度-APP" class="headerlink" title="百度 APP"></a>百度 APP</h3><p>这个，跟前面几个相比，就显得很不充实了，没多少干货，但 PPT 还是可以一看吧</p><h3 id="Real-Time-SaaS"><a href="#Real-Time-SaaS" class="headerlink" title="Real-Time SaaS"></a>Real-Time SaaS</h3><p>这是一个做在线教育的公司的开发者来讲的，主要涉及的技术就是 WebRTC， 其他都没啥</p><h2 id="晚宴"><a href="#晚宴" class="headerlink" title="晚宴"></a>晚宴</h2><p>不得不说，我们团队太强了，一共一百个名额的晚宴，我们五个人居然都成功拿到入场资格。。</p><p>总觉得晚宴才是整个大会的精华部分，不仅晚餐精致丰富不限量。而且还有各种大佬分享各方面的坑和经验。而且都是如此近距离的观察和聆听嗷，很多公司很多大佬居然就坐在旁边桌吃饭，这是怎样一种体验，以我的话来说，就是我这辈子没这么酷过</p><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>有了第一天的经验，第二天就不是那么拘谨了，轻车熟路的到达会场，开始听又一批大佬讲座</p><h3 id="MinIO-对象储存"><a href="#MinIO-对象储存" class="headerlink" title="MinIO 对象储存"></a>MinIO 对象储存</h3><p>总体就是讲 MinIO 的各种优势，推荐使用</p><h2 id="干货PPT"><a href="#干货PPT" class="headerlink" title="干货PPT"></a>干货PPT</h2><p><a href="https://www.yuque.com/techcats/imxk6x" target="_blank" rel="noopener">查看PPT列表</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小结 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结(二)</title>
      <link href="/2019/4300.html"/>
      <url>/2019/4300.html</url>
      
        <content type="html"><![CDATA[<h1 id="周记二"><a href="#周记二" class="headerlink" title="周记二"></a>周记二</h1><h2 id="絮叨"><a href="#絮叨" class="headerlink" title="絮叨"></a>絮叨</h2><p>这周（其实是上周）很充实的，但是做的事很少，都是看别人</p><p>大事件只有参加 Gopher China 2019 这一件，收获也很丰富</p><h2 id="做事"><a href="#做事" class="headerlink" title="做事"></a>做事</h2><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2>]]></content>
      
      
      <categories>
          
          <category> 每周总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小结 </tag>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win 安装 Linux</title>
      <link href="/2019/424.html"/>
      <url>/2019/424.html</url>
      
        <content type="html"><![CDATA[<h1 id="Win-安装-Linux"><a href="#Win-安装-Linux" class="headerlink" title="Win 安装 Linux"></a>Win 安装 Linux</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>因为笔者有一台吃灰的 Win 电脑但是平时做开发主要是用 Mac，但是又对 Win 有一些小需求，不舍得卸载掉 Win，于是打算在 Win 上安装 Linux，可以为 Mac 提供一点算力，防止长时间吃灰。</p><p>也可以有一个可以放心折腾的地方，需要稳定部署的服务放到线上服务，不需要长期稳定的服务，就可以放进虚拟机乱来啦。也有个最真实的环境</p><h2 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h2><p>最首先当然是要安装一个虚拟沙盒啦，笔者推荐使用 VirtualBox ，操作简单，新手友好</p><p>可以去 <a href="https://www.oracle.com/technetwork/server-storage/virtualbox/downloads/index.html" target="_blank" rel="noopener">VirtualBox官网下载页面</a> 下载，或者在 <a href="https://mirrors.tuna.tsinghua.edu.cn/virtualbox/" target="_blank" rel="noopener">清华大学开源软件镜像站</a> 下载</p><p>下载完成后傻瓜式安装</p><a id="more"></a><h2 id="Ubuntu-镜像"><a href="#Ubuntu-镜像" class="headerlink" title="Ubuntu 镜像"></a>Ubuntu 镜像</h2><p>其实这里有很多选择，Ubuntu，Centos，FreeBSD 等等，因为笔者在阿里租借的服务器是 Ubuntu ，所以笔者选择Ubuntu 以获得更相似的环境（但我选择了最新的 1904 版），更多发行版可在 <a href="https://mirrors.tuna.tsinghua.edu.cn" target="_blank" rel="noopener">清华大学开源软件镜像站</a> 获取</p><p>笔者选择这一个</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556115838462-a771b2b3-72de-470f-9d3d-1f2f5de66b55.png" alt="ubuntu"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556116176308-22a252fe-c963-4f64-a5fe-06ef8e1998db.png" alt="新建"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556116224484-b2db2830-bba8-4e37-b20e-b584d9220eb4.png" alt="命名"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556116239710-fba45b5e-5548-4f08-9bea-ce0b9f141655.png" alt="内存"></p><p>配置内存大小，默认 1G 一般情况足够使用，笔者选择加到 2G，这里往后一直点下一步就完事儿了</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556116311481-171b5860-2ab8-4c37-8751-5ec7157c0fbc.png" alt="硬盘"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556116401476-133b274f-abc4-4435-8db7-1174dcb9d762.png" alt="创建硬盘"></p><p>虚拟硬盘大小，默认是动态扩充，就是说即使你只分配了10G，如果占用超过10G，它就会自己去多占用空间来扩充，而不是告诉你空间不足，但是为了保险，还是选择20G（之前听说有学弟出现过空间不足的情况，反正我没遇到过）</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556116542022-6b19abfc-c377-4e7f-88e7-ec6d4955290f.png" alt="点击启动"></p><p>虚拟机创建完成，点击启动来启动虚拟机</p><h3 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556116583335-fb9d7315-2cb0-49ea-932d-50997f7872b1.png" alt="选择启动盘"></p><p>在启动的时候，会弹出这个小窗口，让选择启动盘，这里就选择之前下载的 Ubuntu 镜像啦</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556116690689-05b3e3ff-836f-4143-b993-30843f9ce4bb.png" alt="等待安装"></p><p>如果启动到这里，基本是启动虚拟机了，等待几分钟，即将开始配置 Ubuntu 安装器</p><h3 id="配置-Ubuntu-安装器"><a href="#配置-Ubuntu-安装器" class="headerlink" title="配置 Ubuntu 安装器"></a>配置 Ubuntu 安装器</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556116762437-7e6dad5d-8a25-406c-bcb5-52fd803fb3de.png" alt="选择语言"></p><p>当你看到这个界面，OK，从这里开始配置，第 0 步，选择语言，当然 English 啦，敲回车就完事了</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556116862722-53796a08-9846-4329-a77b-d182a693677c.png" alt></p><p>提示有更新，这里为了方便，选择不更新直接安装</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556116936200-67d8f961-6ace-4dad-8471-16f48c979a27.png" alt></p><p>选择键盘布局，不用说， English ！</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556116970635-cdf85fa4-d917-46f5-a27d-28661ee922b6.png" alt></p><p>选择操作，当然是 安装Ubuntu 啦</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556117036534-66e0eed3-ce57-42ae-b4db-4fe411c1b186.png" alt></p><p>这里是配置网络连接，默认是用 Nat 地址映射，不用改，直接下一步（安装好之后可以设置虚拟机网络为 桥接）</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556117144508-a10b2859-7ab2-474b-bdaf-e1c773e58b62.png" alt></p><p>代理设置，不需要使用代理，直接下一步（有需要的话 按上方向键 可移动光标到文本框，输入代理地址）</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556117218960-72806d81-ecab-4339-9c75-a758f4a40ecc.png" alt></p><p>镜像源配置，这个就需要修改了，笔者推荐使用 清华源: <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/ubuntu</a></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556117310011-27e6c4b6-392b-4063-a4d0-f5c02c522945.png" alt></p><p>因为硬盘是之前分配的20G空间，分区也不用我们操心，直接使用整个硬盘</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556117374674-abf92ece-d796-453e-8be8-b3dc1afe7b50.png" alt></p><p>只有这一个硬盘，下一步</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556117395143-a9a57cf3-974c-45f2-936c-45250479aa45.png" alt></p><p>确认信息无误，Done！</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556117424696-a6c156a3-25ae-45ca-ae7b-5210a0ae9fc7.png" alt></p><p>提示操作不可逆，是否确定，选择继续</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556117460670-6a7a5126-04b4-4a02-b38b-f171a84ef2f4.png" alt></p><p>服务器命名和创建用户，自己解决就好，可以看到下面的进度，系统已经在安装过程中了，一边配置一边安装</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556117551242-3027feca-99f6-4387-b1da-f739eaf4db7b.png" alt></p><p>是否安装 OpenSSH ，当然啦，不然怎么给 Win 提供算力，怎么供其他设备远程访问呢，勾选好之后 Done！</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556117640864-25b2d3b0-48a9-4d1c-a897-7aba4a4276c0.png" alt></p><p>推荐安装的一些软件，可以自己选择要不要安装，这里笔者推荐安装 docker 和 etcd，但是为了省时，现在先不安装，装好之后自己手动安装，读者选择要安装的软件之后 Done</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556117763494-1f3ccf90-7ef0-412a-97ad-ff9eff2bbc98.png" alt></p><p>安装完成啦，选择 Reboot 重启机器</p><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p>启动机器后，输入用户名密码登录（输入密码的时候没有回显嗷，不要以为没有输入进去，只是没有回显），一切正常，安装成功！</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556118537423-028e872b-4811-412b-8ed1-ed8ee4d515f6.png" alt></p><p>可以看到，登录成功后给出了机器的 IP 地址，如果没有给出的话可以尝试 <code>ifconfig | grep 192.168</code> 命令</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556118682823-125f32e4-73d4-4bf2-85ac-74a90f09adb6.png" alt></p><p>同样可以知道机器的 IP 地址</p><h2 id="在-Mac-上测试连通性"><a href="#在-Mac-上测试连通性" class="headerlink" title="在 Mac 上测试连通性"></a>在 Mac 上测试连通性</h2><p>既然知道机器的 IP 地址，在 Win 上先测试一下 SSH 能不能连接上</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556118812918-a847d6b0-855d-4f3d-9f5a-b66db47611c7.png" alt></p><p>成功连接到虚拟机的 Shell</p><p>ps: 注意在输入密码的时候是没有回显的，不要误以为没输入进去</p><p>在 Win 上的操作就到这里结束，可以切回 Mac ，目测没有问题</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1556119097637-e2c98440-4d2a-43dd-8e48-9e72be349a92.png" alt></p><p>一切正常，那么接下来就可以开始开发环境的配置了，安装 Docker, Kubernetes, Istio 等一系列工具</p>]]></content>
      
      
      <categories>
          
          <category> 杂言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书句子收集</title>
      <link href="/2019/4211.html"/>
      <url>/2019/4211.html</url>
      
        <content type="html"><![CDATA[<h1 id="觉得好的句子，就收集在这里吧"><a href="#觉得好的句子，就收集在这里吧" class="headerlink" title="觉得好的句子，就收集在这里吧"></a>觉得好的句子，就收集在这里吧</h1><p>虽然自己在每天的日记里也会记录一些句子，这里就不把那些搬运过来，日记里记录短句，这里记录长句吧</p><a id="more"></a><h2 id="周总结一"><a href="#周总结一" class="headerlink" title="周总结一"></a>周总结一</h2><h3 id="《共产党宣言》"><a href="#《共产党宣言》" class="headerlink" title="《共产党宣言》"></a>《共产党宣言》</h3><blockquote><ol><li>现代的工人只有当他们找到工作的时候才能生存，而且只有当他们的劳动增值资本的时候才能找到工作</li><li>由于推广机器和分工，无产者的劳动已经失去了任何独立的性质，因而对工人也失去了任何吸引力。工人变成了机器的单纯的附属品，要求他做的只是极其简单，极其单调和极容易学会的操作。因此，花在工人身上的费用，几乎只限于维持工人生活和延续工人后代所必需的生活资料。但是，商品的价格，从而劳动的价格，是同它的生产费用相等的。因此，劳动越使人感到厌恶，工资也就越减少。</li><li>现代工业已经把家长式的师傅的小作坊变成了工业资本家的大工厂。挤在工厂里的工人群众就像士兵一样被组织起来。他们是产业军的普通士兵，受着各级军士和军官的层层监视。他们不仅仅是资产阶级的，资产阶级国家的奴隶，他们每日每时都受机器，受监工，首先是受各个经营工厂的资产者本人的奴隶。这种专制制度越是公开地把营利宣布为自己的最终目的，它就越是可鄙，可恨和可恶。</li><li>手的操作所要求的技巧和气力越少，换句话说，现代工业越发达，男工也就越受到女工和童工的排挤。对工人阶级来说，性别和年龄的差别再没有什么社会意义了。他们都只是劳动工具，不过因为年龄和性别的不同而需要不同的费用罢了。</li></ol></blockquote><h3 id="《毛泽东选集》卷一"><a href="#《毛泽东选集》卷一" class="headerlink" title="《毛泽东选集》卷一"></a>《毛泽东选集》卷一</h3><blockquote><ol><li>他们觉得现在如果只使用和从前相等的劳动，就会不能维持生活。必须增加劳动时间，每天起早散晚，对于职业加倍注意，方能维持生活。</li><li>这派议论貌似有理，其实也是错的。第一，上述那些事，都是土豪劣绅，不法地主自己逼出来的。土豪劣绅，不法地主，历来凭借实力称霸，践踏农民，农民才有这种很大的反抗。凡是反抗最力，乱子闹得最大的地方，都是土豪劣绅，不法地主为恶最甚的地方。农民的眼睛，全然没有错的。谁个劣，谁个不劣，谁个最甚，谁个稍次，谁个惩办要严，谁个处罚从轻，农民都有极明白的计算，罚不当罪的极少。第二，革命不是请客吃饭，不是做文章，不是绘画绣花，不能那样雅致，那样从容不迫，文质彬彬，那样温良恭俭让。革命是暴动，是一个阶级推翻一个阶级的暴烈的行动。</li><li>矫枉必须过正，不过正不能矫枉。</li><li>以前土豪劣绅的残忍，土豪劣绅造成的农村白色恐怖是这样，现在农民起来枪毙几个土豪劣绅，造成一点小小的镇压反革命派的恐怖现象，有什么理由说不应该？</li><li>封建时代独裁专断的恶习惯深中于群众乃至党员的头脑中，一时扫除不净，遇事贪图便利，不喜欢麻烦的民主制度。</li><li>本位主义，一切只知道为四军打算，不知道武装地方群众是红军的重要任务之一。这是一种放大了的小团体主义。</li><li>有少数同志囿于四军的局部环境，以为除此就没有别的革命势力了。因此，保存实力，避免斗争的思想非常浓厚。这是机会主义的残余。</li><li>不顾主客观条件，犯着革命的急性病，不愿意艰苦地做细小严密的群众工作，只想大干，充满着幻想。这是盲动主义的残余。</li></ol></blockquote><h3 id="《在路上》"><a href="#《在路上》" class="headerlink" title="《在路上》"></a>《在路上》</h3><p>本来这本里也是有很多好句子的，但几乎都是短句，就不记录了</p>]]></content>
      
      
      <categories>
          
          <category> 收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收集 </tag>
            
            <tag> Reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结(一)</title>
      <link href="/2019/4210.html"/>
      <url>/2019/4210.html</url>
      
        <content type="html"><![CDATA[<h1 id="周记一"><a href="#周记一" class="headerlink" title="周记一"></a>周记一</h1><h2 id="絮叨"><a href="#絮叨" class="headerlink" title="絮叨"></a>絮叨</h2><p>这是第一次写每周总结，没有什么经验，那就想到什么写什么</p><h2 id="做事"><a href="#做事" class="headerlink" title="做事"></a>做事</h2><a id="more"></a><ol><li>上课满勤，一节都没逃过，但是偶尔课上打盹</li><li>每天坚持锻炼，5 公里 + 30 * 3 俯卧撑 + 30 * 3 仰卧起坐</li><li>买了很多书籍并开始阅读，包括《毛选》共五卷，《共产党宣言》，《密码学》，架构方面两本，预计一到两个月读完</li><li>理发，寸头，非常清爽</li></ol><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>我在考虑这个部分，应该怎么来作记录呢</p><p>按照上面做事的分店讲，还是分类别讲</p><p>还是分类别吧，觉得受上一节点约束很奇怪</p><h3 id="读书记录的句子"><a href="#读书记录的句子" class="headerlink" title="读书记录的句子"></a>读书记录的句子</h3><p>如果直接写在这里的话，恐怕内容太多导致头重脚轻了，就单独放在另一篇博客里吧，这里放个链接</p><p><a href="http://rfsx.bugzeng.com/2019/4211.html">读书句子收集</a></p><h3 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h3><p>本周新起了一个项目，是关于 RSS 的，可见于 <a href="http://rfsx.bugzeng.com/2019/418.html">RSS</a></p><p>因为项目刚起步，也没什么好记录的，具体进度可见于我在 GitHub 上的 <a href="https://github.com/rfsx0829/rss" target="_blank" rel="noopener">Repo</a></p><h3 id="强大的工具收集"><a href="#强大的工具收集" class="headerlink" title="强大的工具收集"></a>强大的工具收集</h3><p><a href="https://github.com/uber-go/dig" target="_blank" rel="noopener">dig</a></p><p>这是Go语言的一个依赖注入工具，基于反射实现的</p><p>设计得非常巧妙，我正在进行这个工具的源码阅读，预计不久后会专门写一篇博客来分析一下它的源码和基本原理，并写一些示例</p><p>ps: 其实原理我都知道一点了，拓扑排序嘛</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>因为刚开始做博客，很多东西都不熟悉，在内容输出上也很无力，更新会很慢</p><p>总之 多读书，多坚持 就完事儿了</p>]]></content>
      
      
      <categories>
          
          <category> 每周总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小结 </tag>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 RSS</title>
      <link href="/2019/418.html"/>
      <url>/2019/418.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于-RSS"><a href="#关于-RSS" class="headerlink" title="关于 RSS"></a>关于 RSS</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>刚才突然想了很多事情，突然想到之前在日记中有提到，每周要写总结，并且放到博客上。</p><p>所以，这周的总结，肯定是有的，但因为刚开始，内容可能会非常贫乏，还在摸索道路</p><p>又想到之前我BOSS一年前提到的，关于rss的东西，那时候我刚入门，他让我做一个这方面的应用，但当时的我水平还不足以做到，现在来试试</p><p>所以，这篇文章来讲讲关于RSS的东西，并且我自己又建了一个代码库，尽量完成这个项目</p><h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>RSS 即 Really Simple Syndication 简易信息聚合，其实就是一个 信息源</p><a id="more"></a><p>那么这个项目具体要做什么呢，做一个 RSS 阅读器，虽然已经有很多现成的阅读器了，但我还是要做，因为。。。算是弥补一下以前没能做成这个项目的遗憾吧</p><p>可能还是有读者不理解什么叫做rss，没事，等这篇文章有除我之外的其他读者的时候，可能我这个项目早就做好最初版本了哈，到时候你们自己下载来玩玩就知道了</p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>这里是项目的链接 <a href="https://github.com/rfsx0829/rss" target="_blank" rel="noopener">rss reader</a></p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>因为这篇文章只是讲一下我要做一个这个项目，实际还没有动工，那么在这里就可以展望一下这个项目需要有什么功能</p><h3 id="功能展望"><a href="#功能展望" class="headerlink" title="功能展望"></a>功能展望</h3><ol><li>阅读聚合消息</li><li>添加，删除源</li><li>优质源推荐</li></ol><p>暂定这三个基础功能吧，高级功能后期再添加</p><h3 id="项目形式"><a href="#项目形式" class="headerlink" title="项目形式"></a>项目形式</h3><p>暂定 Golang 后台 + Flutter APP ，等这两个都完工可以考虑再做一个 Web 前端</p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSS </tag>
            
            <tag> APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful 架构</title>
      <link href="/2019/414.html"/>
      <url>/2019/414.html</url>
      
        <content type="html"><![CDATA[<h1 id="RESTful-架构"><a href="#RESTful-架构" class="headerlink" title="RESTful 架构"></a>RESTful 架构</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>所谓 REST，即是 Resources Representational State Transfer 的缩写，即 资源表现层状态转化</p><p>具体怎么理解，我看了 阮一峰 大神的博客，<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">点击这里查看文章</a>，我觉得解释得很清楚</p><p>那为什么还要写这篇博客呢，我是想记录一下自己的感受和见解</p><h2 id="最初的理解"><a href="#最初的理解" class="headerlink" title="最初的理解"></a>最初的理解</h2><a id="more"></a><p>最早看到 RESTful 这个词，还是在以前学 Nodejs 的时候，看 Eggjs 框架，文档中有提到这个概念，但是当时一点都不懂，也没有查资料，以自己粗浅的知识瞎猜了一个意思</p><p>我当时以为 Router 以 URL.Path 调度 Controller 的过程中，每一级的 Controller 和 Path 的名字要一一对应，这个叫做 RESTful 架构，但是现在想想觉得好蠢啊。。</p><h2 id="真正的-RESTful-架构"><a href="#真正的-RESTful-架构" class="headerlink" title="真正的 RESTful 架构"></a>真正的 RESTful 架构</h2><p>阮老师 的博客中已经解释得很清楚了，我再小结一下，也免得自己忘记掉</p><ol><li>资源本身无类型，表现层是什么样取决于需求，就像是 C 语言的内存数据一样，数据本身不会变，表现为什么类型只取决于需求什么类型，所以要注意 Header 中的 Content-Type 哦</li><li>URL.Path 中不能出现动词，应该是分级的名词，版本号也不应出现，要进行的操作应以 Http.Method 来区分</li><li>增删查改 分别对应 POST DELETE GET POST</li></ol><p>当有这些总结之后，再回头看看之前写的那些东西，真的是没眼看</p><blockquote><p>/api/v1/article/add</p></blockquote><p>真是不知道之前怎么能写成这样，这是一次性犯了多少错啊。。。</p><p>所以看了看 RESTful 对自己的提升还是很多的，又要开始重构很多代码了</p>]]></content>
      
      
      <categories>
          
          <category> Architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> Architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现简单Shell</title>
      <link href="/2019/409.html"/>
      <url>/2019/409.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-语言实现简单-Shell"><a href="#C-语言实现简单-Shell" class="headerlink" title="C 语言实现简单 Shell"></a>C 语言实现简单 Shell</h1><p>直接上代码</p><a id="more"></a><h2 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLINE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span>  buf[MAXLINE];</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span>   status;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%% "</span>);</span><br><span class="line">    <span class="keyword">while</span>(fgets(buf, MAXLINE, <span class="built_in">stdin</span>) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[<span class="built_in">strlen</span>(buf) - <span class="number">1</span>] == <span class="string">'\n'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            buf[<span class="built_in">strlen</span>(buf) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Fork Error !\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            execlp(buf, buf, (<span class="keyword">char</span>*)<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((pid = waitpid(pid, &amp;status, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Wait Error !\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%% "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的原理很简单，循环从标准输入读取命令，读取到之后调用系统函数 execlp 执行命令。</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>但是这样其实只能实现无参数调用，如果加参数就会产生错误，像这样</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554896522521-bd50a48e-0eef-43ad-9cb2-4a7d9f3744e2.png" alt="image.png"></p><p>那么想办法来改进一下</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>注意到 其实在调用 exec 系列函数是可以传数组参数的，其中有一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span><span class="title">execvp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * __file, <span class="keyword">char</span> * <span class="keyword">const</span> * __argv)</span></span>;</span><br></pre></td></tr></table></figure><p>于是，这样来改进程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLINE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span>  buf[MAXLINE];</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span>   status;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%% "</span>);</span><br><span class="line">    <span class="keyword">while</span>(fgets(buf, MAXLINE, <span class="built_in">stdin</span>) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(buf);</span><br><span class="line">        <span class="keyword">char</span>* argv[<span class="number">10</span>] = &#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> args = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(buf[len - <span class="number">1</span>] == <span class="string">'\n'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            buf[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将读取到的字符串，解析成参数的数组保存在 argv 中，再传给 execlp</span></span><br><span class="line">        argv[args] = (<span class="keyword">char</span>*)buf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(buf[i] == <span class="string">' '</span> &amp;&amp; buf[i+<span class="number">1</span>] != <span class="string">' '</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                buf[i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(buf[i+<span class="number">1</span>] != <span class="string">' '</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    argv[++args] = (<span class="keyword">char</span>*)(buf + i+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// fork 函数 一次调用两次返回，对父进程返回子进程的 pid ，对子进程返回 0，如果返回值小于 0 则表示有错误</span></span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Fork Error !\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            execvp(argv[<span class="number">0</span>], argv);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((pid = waitpid(pid, &amp;status, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Wait Error !\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%% "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="再演示"><a href="#再演示" class="headerlink" title="再演示"></a>再演示</h2><p>看看改进后的效果，是否可以支持加参数了</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554900459904-1e5d6fa6-5ef1-4357-a386-fa1920853ee4.png" alt="image.png"></p><p>就可以支持参数了，很好嗷</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 问题一记</title>
      <link href="/2019/406.html"/>
      <url>/2019/406.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter-环境配置的小问题"><a href="#Flutter-环境配置的小问题" class="headerlink" title="Flutter 环境配置的小问题"></a>Flutter 环境配置的小问题</h1><p>因为之前重置过 Mac 一次，导致我的 Flutter 开发环境没有了，又得重新配置环境，而这个过程，真的是让我很头大，我觉得这甚至可以写进博客，这里可以稍微记录下大体的思路</p><h2 id="下载-Flutter-并添加-bin-到-PATH"><a href="#下载-Flutter-并添加-bin-到-PATH" class="headerlink" title="下载 Flutter 并添加 bin 到 PATH"></a>下载 Flutter 并添加 bin 到 PATH</h2><p>这一步倒是没什么问题，轻车熟路的，一下子就搞定了</p><h2 id="配置-Android-SDK"><a href="#配置-Android-SDK" class="headerlink" title="配置 Android SDK"></a>配置 Android SDK</h2><p>这是最烦的，在这里耗费了不知道多少时间和好心情</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>第一个问题，下载，本来没什么难度，但是。。。</p><a id="more"></a><p>在 Flutter 的官方文档上有这么一个 Note</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554481707317-e938bb0a-666c-48fb-970e-eb7592538ce5.png" alt="Note"></p><p>翻译一下：Flutter <strong>依赖一个 Android Studio 的完整安装</strong> 来支持它对 Android 平台的依赖，然而，你可以在很多编辑器里写你的 Flutter 应用</p><p>官网说需要一个完整的安装。。但我记得之前好像没有装 Android Studio 也能用啊，这次怎么回事</p><p>那。。到底是下载完整的 Android Studio 呢还是只下载 Command Line Tool 呢</p><p>我选择了后者</p><h3 id="Flutter-doctor"><a href="#Flutter-doctor" class="headerlink" title="Flutter doctor"></a>Flutter doctor</h3><p>Flutter 不认 Android SDK，始终说缺一个 platforms 文件夹，才知道原来这是可以通过 sdkmanager 安装的，于是 执行 sdkmanager 试试，得到了报错。。。网上一查。。。是Java的问题</p><h3 id="Java-版本冲突"><a href="#Java-版本冲突" class="headerlink" title="Java 版本冲突"></a>Java 版本冲突</h3><p>网上查了很久才知道，原来 sdkmanager 只支持 JDK 10 及以下的，但是我之前。。。刚装了 JDK 12。。</p><p>于是，卸载，装 JDK 8</p><p>ps： 为什么是 JDK 8 不是 JDK 10 ？</p><p>ps： 因为 JDK8 可以直接支持 sdkmanager，9 和 10 还要去加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">'-XX:+IgnoreUnrecognizedVMOptions --add-modules java.se.ee'</span></span><br></pre></td></tr></table></figure><h3 id="Java-解决方案"><a href="#Java-解决方案" class="headerlink" title="Java 解决方案"></a>Java 解决方案</h3><ol><li>JDK 8 及以下，可直接使用 sdkmanager 安装 Android SDK</li><li>JDK 9 和 JDK 10，需添加环境变量让 sdkmanager 能找到那个模块，然后再正常使用</li><li>JDK 11 和 JDK 12，添加环境变量无作用，因为。。那个包被移除了。。只能装低版本。。。</li></ol><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>最后的，其实挺简单，通过 sdkmanager 安装好 platforms 和 build-tools 之后，添加一个 ANDROID_HOME  就完事了，再执行 flutter doctor 看看，应该就可以识别 SDK 了</p><p>ps：可能还会有证书问题，这个 flutter 给了提示，按提示来可以手动确认证书</p><h2 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h2><p>电脑环境倒是配置好了，手机又出问题了，之前在玩 Island，但似乎它的权限有点过大了，居然把 Android 调试给劫持了，把这个软件里面的一个功能关掉才能正常连接电脑。。。</p><p>然后几分钟后，手机疯狂死机重启。。。</p><p>然后就重装了 Pixel Experience CAF</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>深夜了，环境终于全部搞完，我的三天假期就只剩下两天来做开发，一天都被配这个环境给浪费掉了，从心说一句，垃圾 Java ！自己都不向下兼容，你开发**呢</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小问题 </tag>
            
            <tag> Flutter </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探 Kubernetes（二）</title>
      <link href="/2019/3311.html"/>
      <url>/2019/3311.html</url>
      
        <content type="html"><![CDATA[<h1 id="记录一些小问题"><a href="#记录一些小问题" class="headerlink" title="记录一些小问题"></a>记录一些小问题</h1><h2 id="VirtualBox-出现-NS-ERROR-FAILURE-0x80004005-错误"><a href="#VirtualBox-出现-NS-ERROR-FAILURE-0x80004005-错误" class="headerlink" title="VirtualBox 出现 NS_ERROR_FAILURE(0x80004005) 错误"></a>VirtualBox 出现 NS_ERROR_FAILURE(0x80004005) 错误</h2><p>这个问题我是很懵逼的，一开始不知道为什么出现的，经过许多查阅后，得到了几个解法（但是对我的问题没用，似乎这个错误的产生原因有许多）</p><ol><li>重装 VirtualBox</li><li>VirtualBox 文件夹里 改把 vbox 文件删了，重开虚拟机</li><li>卸载重装后，在 设置-隐私和安全 中允许给 VirtualBox 权限</li></ol><p>如果这几个方法解决不了你的问题，那还是自己Google吧</p><p>ps: 我的问题就很厉害了，同样是这个报错，但是百般搜索无果，可能是我动坏了底层的东西，重装系统之后问题解决</p><h2 id="Minukube-启动时-Pull-Image-失败"><a href="#Minukube-启动时-Pull-Image-失败" class="headerlink" title="Minukube 启动时 Pull Image 失败"></a>Minukube 启动时 Pull Image 失败</h2><p>这个问题。。主要还是因为 Kubernetes 是外国的嘛，国内访问的话延迟会比较高或者被 Block，所以解决方案也很简单</p><a id="more"></a><ol><li>代理</li><li>用国内可以访问的源</li></ol><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>代理的话，就不用多解释了，一般配置好之后会监听在某个端口上，我们要做的就是让 Minikube 在 Pull Image 的时候走这个端口，直接在终端配置环境变量就行了</p><blockquote><p>export HTTP_PROXY=127.0.0.1:8080<br>export HTTPS_PROXY=127.0.0.1:8080</p></blockquote><p>或者</p><blockquote><p>HTTP_PROXY=127.0.0.1:8080 HTTPS_PROXY=127.0.0.1:8080 minikube start</p></blockquote><h3 id="能访问的源"><a href="#能访问的源" class="headerlink" title="能访问的源"></a>能访问的源</h3><p>这个就比较简单了，DockerHub，就行，虽然还是比较慢，很多 Kubernetes 的镜像在 DockerHub 都有嗷，只要Pull下来改一下 tag 就行了</p><blockquote><p>docker pull mirrorgooglecontainers/kube-apiserver:v1.14.0<br>docker tag mirrorgooglecontainers/kube-apiserver:v1.14.0 k8s.gcr.io/kube-apiserver:1.14.0</p></blockquote><h2 id="Kubernetes-使用-Docker-本地的-Image"><a href="#Kubernetes-使用-Docker-本地的-Image" class="headerlink" title="Kubernetes 使用 Docker 本地的 Image"></a>Kubernetes 使用 Docker 本地的 Image</h2><p>上一篇文章中我提到了一个，没有解释的神奇命令，这里来解释一下</p><p>先说问题和解决方案，再详细描述</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>问题就是 不知道本地有一个Docker，Minikube 里面还有另外一个 Docker，并不互通</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在执行 <code>docker build</code> 之前，先执行一句 <code>eval $(minikube docker-env)</code> 使 Docker client 连接到 Minikube 中的 Docker daemon 上，之后的操作就可以正常进行了</p><h3 id="问题起源"><a href="#问题起源" class="headerlink" title="问题起源"></a>问题起源</h3><p>自己写了一个简单的 HelloWorld 服务，打算用 Kubernetes 部署，看到书上讲 Kubernetes 是可以直接使用Docker 镜像的，于是将服务构建成镜像，但没有推送到 Hub 上，打算就在本地供测试使用，万万没想到，出现了一些问题</p><h3 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h3><p>构建镜像之后，执行 <code>docker images</code> 能看到镜像构建成功</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554035962870-74984556-e663-4c6f-bb3e-c5a2a0fde779.png" alt="docker images"></p><p>但是在创建 Deployments 后启动 Pod 的时候出现了问题</p><blockquote><p>$ kubectl run hello-go –image=hello-go:v1.0 –port=8080<br>deployment.apps “hello-go” created<br>$ kubectl get pods</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554192581403-b6458b9b-69c1-4813-87f3-d177dc0b8816.png" alt="kubectl get pods"></p><p>结果又出现了错误，实在搞不懂为什么明明本地有镜像 Minikube 却还要去拉取，禁用拉取之后又告诉不行，死活不使用本地的镜像，于是又开始查询，经过了很长时间的查询（可能书上有但我不仔细），才找到了解决方案和原因，<strong>原来 Minikube 自己维护了一个 Docker daemon，可以通过 <code>minikube ssh</code> 命令连接到 Minikube 的 shell ，再执行 <code>docker images</code> 查看 Minikube 内的 Docker 镜像</strong></p><blockquote><p>$ minikube ssh<br>$ docker images</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554194007240-2217cf6d-f9dd-44db-beed-b042d183cf7c.png" alt="docker images"></p><p>可以看到，<strong>原来 Minikube 的本地真的没有 hello-go 镜像，这就很好的解释了为什么它会去拉取镜像，设置为永不拉取之后出现错误的问题了</strong></p><p>知道问题因何而起，那解决起来就简单了</p><p>注意到 Minikube 有一个子命令 docker-env</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554194287519-8c95d777-7d86-4934-a49c-88b711e2f30f.png" alt="minikube"></p><p>执行看看</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554194319879-5a4fbbac-1b3d-497f-92ab-f1708f364b98.png" alt="minikube docker-env"></p><p>给出了 Minikube 内部 Docker daemon 的地址和端口，提示执行 <code>eval $(minikube docker-env)</code> ，照着做就可以使你的 Docker client 直接操作 Minikube 中的 Docker daemon，于是再构建镜像就是保存在 Minikube 中了</p><blockquote><p>$ eval $(minikube docker-env)<br>$ cd ./projectDirectory     // 将工作目录切换到项目文件夹下<br>$ docker build -t hello-go:v1.0 .<br>$ docker images</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554194695441-a57f6a9d-0830-4820-875c-857511f19727.png" alt="docker images"></p><p>这样，就成功构建了镜像并且镜像是保存在 Minikube 中的 Docker 中了，再用 kubectl 创建 deployments</p><blockquote><p>$ kubectl run hello-nice –image=hello-go:v1.0 –port=8080<br>deployment.apps “hello-nice” created<br>$ kubectl get pods</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554194859859-fd9c492f-d9d5-4d01-bb4a-3c8326bbb2c0.png#align=left&amp;display=inline&amp;height=137&amp;name=image.png&amp;originHeight=137&amp;originWidth=675&amp;size=27688&amp;status=done&amp;width=675" alt="kubectl get pods"></p><p>可以看到，不仅新建的 Pods 正常运行了，而且之前因为没有镜像而出错的 Pods 都正常了！</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在尝试minikube的过程中笔者就只遇到了这些问题，很庆幸都解决掉了，那这篇文章就记录到这里。</p><p>读者在Minikube使用过程中有什么问题都可以联系笔者噢，说不定可以帮点小忙:)</p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小问题 </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探 Kubernetes（一）</title>
      <link href="/2019/3310.html"/>
      <url>/2019/3310.html</url>
      
        <content type="html"><![CDATA[<h1 id="记录初探-Kubernetes-的过程"><a href="#记录初探-Kubernetes-的过程" class="headerlink" title="记录初探 Kubernetes 的过程"></a>记录初探 Kubernetes 的过程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>一直有想学习 Kubernetes ，最近看了些书，也自己用了用，也遇到了一些小问题，值得写篇博客记录一下</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于笔者仅是自学如何使用 Kubernetes，仅是单机版，还未到部署到生产环境的时候，且使用的是 Mac 电脑，故选择使用 Minikube</p><p>要安装使用 Minikube ，需要先安装 VirtualBox ，以下是一些过程</p><a id="more"></a><h3 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h3><p><a href="https://www.virtualbox.org" target="_blank" rel="noopener">VirtualBox官网</a> 提供了下载，或者可以到 <a href="https://mirrors.tuna.tsinghua.edu.cn/virtualbox/" target="_blank" rel="noopener">清华大学开源软件镜像站</a> 下载</p><p>下载完成之后，打开安装包安装即可</p><h3 id="Minikube"><a href="#Minikube" class="headerlink" title="Minikube"></a>Minikube</h3><p><a href="https://github.com/kubernetes/minikube" target="_blank" rel="noopener">Minikube</a> 是 Minikube 在 Github 中的项目地址，可以在 Release 标签中找到最新版本下载</p><blockquote><p>$ cd ~/Downloads<br>$ chmod +x ./minikube<br>$ mv ./minikube /usr/local/bin/minikube</p></blockquote><p>这里是给下载的 minikube 加上执行权限后放到 /usr/local/bin 里面，也可以自己选择放在任意 PATH 里</p><p>然后运行测试一下是否安装完成</p><blockquote><p>$ minikube version<br>minikube version: v1.0.0</p></blockquote><p>正确显示出 minikube 的版本，安装成功！</p><h3 id="Kubectl"><a href="#Kubectl" class="headerlink" title="Kubectl"></a>Kubectl</h3><p>Kubectl 是用于控制 Kubernetes 的，可通过包管理程序安装(Mac 用 brew ，Centos 用 yum，Ubuntu 用 apt)</p><blockquote><p>$ brew install kubernetes-cli<br>$ kubectl<br>kubectl controls the Kubernetes cluster manager.</p><p>Find more information at: <a href="https://kubernetes.io/docs/reference/kubectl/overview/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/kubectl/overview/</a><br>…</p></blockquote><p>安装成功，接下来可以准备启动了</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><p>$ minikube start<br>😄  minikube v1.0.0 on darwin (amd64)<br>🤹  Downloading Kubernetes v1.14.0 images in the background …<br>💡  Tip: Use ‘minikube start -p <name>‘ to create a new cluster, or ‘minikube delete’ to delete this one.<br>🏃  Re-using the currently running virtualbox VM for “minikube” …<br>⌛  Waiting for SSH access …<br>📶  “minikube” IP address is 192.168.99.104<br>🐳  Configuring Docker as the container runtime …<br>🐳  Version of container runtime is 18.06.2-ce<br>⌛  Waiting for image downloads to complete …<br>✨  Preparing Kubernetes environment …<br>🚜  Pulling images required by Kubernetes v1.14.0 …<br>🔄  Relaunching Kubernetes v1.14.0 using kubeadm …<br>⌛  Waiting for pods: apiserver proxy etcd scheduler controller dns<br>📯  Updating kube-proxy configuration …<br>🤔  Verifying component health …..<br>💗  kubectl is now configured to use “minikube”<br>🏄  Done! Thank you for using minikube!</name></p><p>$ kubectl get nodes</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554018821347-c95d911f-88cb-4a73-b226-c425a84932e8.png" alt="kubectl get pods"></p><p>可以看到， minikube 启动成功之后，用 <code>kubectl get nodes</code> 可以成功获取到 nodes 的信息，一切正常！</p><h2 id="写一个小服务，尝试部署"><a href="#写一个小服务，尝试部署" class="headerlink" title="写一个小服务，尝试部署"></a>写一个小服务，尝试部署</h2><h3 id="Hello-World-代码"><a href="#Hello-World-代码" class="headerlink" title="Hello World 代码"></a>Hello World 代码</h3><p>此处采用Go语言，因为可以静态编译且语法简单</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/"</span>, handler)</span><br><span class="line">fmt.Println(<span class="string">"Listening on http://localhost:8080/"</span>)</span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"Hello World"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>$ go run main.go<br>Listening on <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p></blockquote><p>用浏览器打开上面的网址可以看到</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554013868546-bc0e4859-0672-4173-9b5b-99326c52373d.png" alt="浏览器访问"></p><p>成功输出了 Hello World</p><p>下一步</p><h3 id="静态编译"><a href="#静态编译" class="headerlink" title="静态编译"></a>静态编译</h3><p>可能有人会问会什么要静态编译，不能直接 <code>go run main.go</code> 吗</p><p>如果用 <code>go run main.go</code> 来启动服务，那么还需要 Go 语言的开发环境，如果代码复杂一点还需要安装各种依赖库，会导致镜像过于庞大，因为这只是一个很小很简单的 Demo ，仅作测试的小玩具，静态编译出的可执行文件最大不到 10MB ，而为了不编译直接运行所需要的开发环境，至少都是 几百MB ，没有必要为了一个小 Demo 去浪费那么多资源，所以选择静态编译</p><blockquote><p>$ GOOS=linux CGO_ENABLED=0 go build -o main -ldflags ‘-extldflags “-static”‘ main.go</p></blockquote><p>执行这条命令后可以看到当前目录下多了一个名为 main 的可执行文件</p><p>但是不能执行，因为当前是 MacOS 环境，而静态编译时指定的是 Linux 环境</p><p>ps: 如果读者是 Linux 环境当我没说</p><p>ps: 如果有读者看不懂这条命令，没关系不要怕，你不是不懂 Golang ，你只是不懂 C 而已</p><h3 id="构建-Docker-镜像"><a href="#构建-Docker-镜像" class="headerlink" title="构建 Docker 镜像"></a>构建 Docker 镜像</h3><p>要构建 Docker 镜像，我们先写一个 dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./main /main</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"/main"</span> ]</span></span><br></pre></td></tr></table></figure><p>ps: scratch 是一个空的 Docker 镜像，即不使用基础镜像的意思</p><p>写好 Dockerfile 后，在执行命令构建镜像之前，要确保minikube已经启动，并且执行一句神奇的命令先</p><blockquote><p>$ eval $(minikube docker-env)</p></blockquote><p>在这条命令里藏着我半天的心酸，下一篇文章会仔细解释，这里先不作解释</p><p>再执行下面这些</p><blockquote><p>$ docker build -t hello:v1.0 .<br>Sending build context to Docker daemon  11.73MB<br>Step 1/3 : FROM scratch<br>—&gt;<br>Step 2/3 : ADD ./main /main<br>—&gt; 636350b5d281<br>Step 3/3 : CMD [ “/main” ]<br>—&gt; Running in a54d3c9c3864<br>Removing intermediate container a54d3c9c3864<br>—&gt; 321b69c05fff<br>Successfully built 321b69c05fff<br>Successfully tagged hello:v1.0<br>$ docker images</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554018896187-c9afeaca-2042-42c8-aaf0-7ad775eb1c33.png" alt="docker images"></p><p>可以看到，成功地构建了镜像，笔者这里镜像大小仅仅只有 7.34MB</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>部署分为两个步骤</p><h4 id="创建-Deployments-和-Pods"><a href="#创建-Deployments-和-Pods" class="headerlink" title="创建 Deployments 和 Pods"></a>创建 Deployments 和 Pods</h4><blockquote><p>$ kubectl run hello –image=hello:v1.0 –port=8080<br>deployment.apps “hello” created<br>$ kubectl get deployments</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554018939941-8516aaf8-b734-40ba-9e1c-4e1d66699988.png" alt="kubectl get deployments"></p><blockquote><p>$ kubectl get pods</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554018967294-676d6ced-c2aa-4e43-8005-414c1e165a13.png" alt="kubectl get pods"></p><p>可以看到，Pods 已经准备好了</p><h4 id="创建-Service-以供外部访问"><a href="#创建-Service-以供外部访问" class="headerlink" title="创建 Service 以供外部访问"></a>创建 Service 以供外部访问</h4><blockquote><p>$ kubectl expose deployment hello –port=8080 –type=NodePort<br>service “hello” exposed<br>$ kubectl get services</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554018998759-1009c3b7-d614-4b01-85fe-6a23fe758bdc.png" alt="kubectl get services"></p><p>可以看到，service 已经创建成功，执行以下命令来查看 service 的 ip 和端口</p><p>ps: ip和端口以自己执行命令后输出的为准</p><blockquote><p>$ minikube service hello –url<br><a href="http://192.168.99.104:31537" target="_blank" rel="noopener">http://192.168.99.104:31537</a><br>$ curl <a href="http://192.168.99.104:31537" target="_blank" rel="noopener">http://192.168.99.104:31537</a><br>Hello World</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/162233/1554017653231-56204059-016c-485a-bd07-7c6d3e6ce782.png" alt="浏览器访问"></p><p>使用浏览器打开，可以看到输出 Hello World，部署一切正常！</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在部署的过程中其实遇到了很多困难，我会在接下来的一篇文章中详细说明，如果有遇到相同困难的朋友可以参考参考</p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> 新开始 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2019/323.html"/>
      <url>/2019/323.html</url>
      
        <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>这是我的第一篇博客哦</p><p>刚搭建好环境，接下来就可以好好写文章啦</p><p>以后预计每周至少两篇博客，内容包括但不限于 编程经验，读书笔记，好词句积累，随笔</p><p>毕竟，这里是我的博客，独属于我自己，那就随意一点喽 :)</p>]]></content>
      
      
      <categories>
          
          <category> 杂言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新开始 </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
